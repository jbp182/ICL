/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
/** ID lister. */
package Components;
import LanguageComponents.Environments.CodeBlock;
import LanguageComponents.Environments.CompilerEnvironment;
import LanguageComponents.Environments.Environment;
import LanguageComponents.Nodes.*;
import LanguageComponents.Nodes.ArithmeticOperators.*;
import LanguageComponents.Nodes.FuncionalCore.*;
import LanguageComponents.Nodes.ImperativeCore.*;
import LanguageComponents.Nodes.LogicOperators.*;
import LanguageComponents.Nodes.RelationalOperators.*;
import LanguageComponents.Types.*;
import java.io.FileInputStream;
import java.io.File;
import java.util.List;
import java.util.LinkedList;

public class Parser implements ParserConstants {

  /** Main entry point. */
  public static void main(String args[]) throws  Exception {

    if(args.length > 1 && args[0].equals("-f")){
        CodeBlock.debug = true;
        compile(args[1]);
        CodeBlock.runJava();
        return;
    }

    Parser parser = new Parser(System.in);
    ASTNode exp;

    while (true) {
        try {
        exp = parser.Start();
        exp.eval(new Environment(null)).show();
        } catch (Exception e) {
          System.out.println ("Syntax Error!\u005cn" + e.getMessage());
          parser.ReInit(System.in);
        }
    }
  }

  private static void compile(String fileName) throws Exception{
      File f = new File(fileName);
      Parser parser = new Parser(new FileInputStream(f));
      ASTNode exp = parser.Start();
      CodeBlock blk = new CodeBlock();
      exp.typeCheck(new Environment<ASTType>(null));
      exp.compile(new CompilerEnvironment(null),blk);
      blk.dump("Main.j");
  }

  final public ASTNode Start() throws ParseException {ASTNode t;
    t = EM();
    jj_consume_token(EL);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode EM() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = E();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEQ:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      op = jj_consume_token(SEQ);
      t2 = EM();
t1 = new ASTSeq(t1,t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode E() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = EA();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ISEQ:{
      op = jj_consume_token(ISEQ);
      t2 = EA();
t1 = new ASTEquals(t1,t2);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode EA() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = T();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        op = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        op = jj_consume_token(MINUS);
        break;
        }
      case AND:{
        op = jj_consume_token(AND);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = EA();
if (op.kind == PLUS)
                         t1 = new ASTPlus(t1,t2);
                   else if (op.kind == MINUS)
                                 t1 = new ASTSub(t1,t2);
                   else t1 = new ASTAnd(t1,t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode T() throws ParseException {Token op;
  ASTNode f1, f2;
  List<ASTNode> al;
    f1 = F();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:{
      label_3:
      while (true) {
        jj_consume_token(LPAR);
        al = AL();
        jj_consume_token(RPAR);
f1 = new ASTApply(f1, al);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAR:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
      }
      break;
      }
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      f2 = E();
f1 = new ASTAssign(f1,f2);
      break;
      }
    case GT:
    case LT:
    case GE:
    case LE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GE:{
        op = jj_consume_token(GE);
        break;
        }
      case LE:{
        op = jj_consume_token(LE);
        break;
        }
      case GT:{
        op = jj_consume_token(GT);
        break;
        }
      case LT:{
        op = jj_consume_token(LT);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      f2 = F();
if (op.kind == GE)
                                                        f1 = new ASTGreaterEqual(f1,f2);
                                          else if (op.kind == LE)
                                                        f1 = new ASTLowerEqual(f1,f2);
                                          else if (op.kind == GT)
                                                        f1 = new ASTGreater(f1,f2);
                                          else if (op.kind == LT)
                                                        f1 = new ASTLower(f1,f2);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TIMES:
        case DIV:
        case OR:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TIMES:{
          op = jj_consume_token(TIMES);
          break;
          }
        case DIV:{
          op = jj_consume_token(DIV);
          break;
          }
        case OR:{
          op = jj_consume_token(OR);
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        f2 = T();
if (op.kind == TIMES)
                                        f1 = new ASTMul(f1,f2);
                                else if (op.kind == DIV)
                                        f1 = new ASTDiv(f1,f2);
                                else f1 = new ASTOr(f1,f2);
      }
    }
{if ("" != null) return f1;}
    throw new Error("Missing return statement in function");
  }

  final public List<ASTNode> AL() throws ParseException {ASTNode n;
  List<ASTNode> args = new LinkedList();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Num:
    case PLUS:
    case MINUS:
    case LPAR:
    case LET:
    case NOT:
    case NEW:
    case DESREF:
    case IF:
    case WHILE:
    case BOOL:
    case FUN:
    case Id:{
      n = EM();
args.add(n);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        n = EM();
args.add(n);
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
{if ("" != null) return args;}
    throw new Error("Missing return statement in function");
  }

  final public void PL(List<String> ids, List<ASTType> types) throws ParseException {Token id;
  ASTType type;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Id:{
      id = jj_consume_token(Id);
      jj_consume_token(COLON);
      type = getType();
ids.add( id.image ); types.add( type );
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Id:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        id = jj_consume_token(Id);
        jj_consume_token(COLON);
        type = getType();
ids.add( id.image ); types.add( type );
      }
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  final public ASTNode F() throws ParseException {Token n, id;
  ASTNode t, init1, init2, body;
  ASTType type;
  List<ASTNode> inits = new LinkedList();
  List<String> ids = new LinkedList();
  List<ASTType> types = new LinkedList();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Num:{
      n = jj_consume_token(Num);
t = new ASTNum(Integer.parseInt(n.image));
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
      t = EM();
      jj_consume_token(RPAR);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      t = F();
t = new ASTMul(new ASTNum(-1), t);
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
      t = F();
      break;
      }
    case BOOL:{
      n = jj_consume_token(BOOL);
t = new ASTBool( n.image );
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      t = F();
t = new ASTNewRef( t );
      break;
      }
    case DESREF:{
      jj_consume_token(DESREF);
      t = F();
t = new ASTDeref( t );
      break;
      }
    case IF:{
      jj_consume_token(IF);
      t = EM();
      jj_consume_token(THEN);
      init1 = EM();
      jj_consume_token(ELSE);
      init2 = EM();
      jj_consume_token(END);
t = new ASTIf( t, init1, init2 );
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      t = EM();
      jj_consume_token(DO);
      body = EM();
      jj_consume_token(END);
t = new ASTWhile(t,body);
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      t = F();
t = new ASTNeg(t);
      break;
      }
    case LET:{
      jj_consume_token(LET);
      id = jj_consume_token(Id);
      jj_consume_token(COLON);
      type = getType();
      jj_consume_token(EQ);
      init1 = EM();
ids.add(id.image); types.add(type); inits.add(init1);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        id = jj_consume_token(Id);
        jj_consume_token(COLON);
        type = getType();
        jj_consume_token(EQ);
        init2 = EM();
ids.add(id.image); types.add(type); inits.add(init2);
      }
      jj_consume_token(IN);
      body = EM();
      jj_consume_token(END);
t = new ASTLet(ids, types, inits, body);
      break;
      }
    case FUN:{
      jj_consume_token(FUN);
      PL(ids, types);
      jj_consume_token(IS);
      body = EM();
      jj_consume_token(END);
t = new ASTFun(ids, types, body);
      break;
      }
    case Id:{
      id = jj_consume_token(Id);
t = new ASTId( id.image );
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public ASTType getType() throws ParseException {ASTType t;
  ASTType type;
  List<ASTType> param = new LinkedList<ASTType>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:{
      jj_consume_token(LPAR);
      t = getType();
param.add(t);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        t = getType();
param.add(t);
      }
      jj_consume_token(RPAR);
      t = getType();
type = ASTFunType.getInstance( param, t );
      break;
      }
    case REF_T:{
      jj_consume_token(REF_T);
      t = getType();
type = ASTRefType.getInstance( t );
      break;
      }
    case INT_T:{
      jj_consume_token(INT_T);
type = ASTIntType.getInstance();
      break;
      }
    case BOOL_T:{
      jj_consume_token(BOOL_T);
type = ASTBoolType.getInstance();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000000,0x20000,0x40060,0x40060,0x200,0xf00000,0x80180,0x80180,0x8f00200,0x8000,0x32011270,0x0,0x0,0x8000,0x32011270,0x8000,0x200,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20d,0x200,0x200,0x0,0x20d,0x0,0x1c0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
