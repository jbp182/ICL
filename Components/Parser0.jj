PARSER_BEGIN(Parser)


/** ID lister. */
package Components;
import LanguageComponents.Environments.CodeBlock;
import LanguageComponents.Environments.CompilerEnvironment;
import LanguageComponents.Environments.Environment;
import LanguageComponents.Nodes.*;
import LanguageComponents.Nodes.ArithmeticOperators.*;
import LanguageComponents.Nodes.FuncionalCore.*;
import LanguageComponents.Nodes.ImperativeCore.*;
import LanguageComponents.Nodes.LogicOperators.*;
import LanguageComponents.Nodes.RelationalOperators.*;
import LanguageComponents.Nodes.ExtendedCore.*;
import LanguageComponents.Types.*;
import java.io.FileInputStream;
import java.io.File;
import java.util.List;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.Map;

public class Parser {

  /** Main entry point. */
  public static void main(String args[]) throws  Exception {

    if(args.length > 1 && args[0].equals("-f")){
        CodeBlock.debug = false;
        compile(args[1]);
        CodeBlock.runJava();
        return;
    }

    Parser parser = new Parser(System.in);
    ASTNode exp;

    while (true) {
        try {
        exp = parser.Start();
        exp.eval(new Environment(null)).show();
        } catch (Exception e) {
          System.out.println ("Syntax Error!\n" + e.getMessage());
          parser.ReInit(System.in);
        }
    }
  }

  private static void compile(String fileName) throws Exception{
      File f = new File(fileName);
      Parser parser = new Parser(new FileInputStream(f));
      ASTNode exp = parser.Start();
      CodeBlock blk = new CodeBlock();
      exp.typeCheck(new Environment<ASTType>(null));
      exp.compile(new CompilerEnvironment(null),blk);
      blk.dump("Main.j");
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EL: "\n" >
  |
  < LET: "let" >
  |
  < IN: "in" >
  |
  < END: "end" >
  |
  < COMMA: "," >
  |
  < NOT: "~" >
  |
  < ISEQ: "==" >
  |
  < AND: "&&" >
  |
  < OR: "||" >
  |
  < GT: ">" >
  |
  < LT: "<" >
  |
  < GE: ">=" >
  |
  < LE: "<=" >
  |
  < EQ: "=" >
  |
  < NEW: "new" >
  |
  < SEQ: ";" >
  |
  < ASSIGN: ":=" >
  |
  < DESREF: "!" >
  |
  < IF: "if" >
  |
  < THEN: "then" >
  |
  < ELSE: "else" >
  |
  < WHILE: "while" >
  |
  < DO: "do" >
  |
  < BOOL: ("true"|"false") >
  |
  < FUN: "fun" >
  |
  < IS: "->" >
  |
  < COLON: ":" >
  |
  < INT_T: "int" >
  |
  < BOOL_T: "bool" >
  |
  < REF_T: "ref" >
  |
  < STR_T: "string" >
  |
  < PRINTLN: "println" >
  |
  < LCB: "{" >
  |
  < RCB: "}" >
  |
  < QUOTE: "\"" >
  |
  < DOT: "." >
  | 
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
}

ASTNode Start():
{ ASTNode t; }
{
   ( t = EM() <EL> )
   { return t; }
}

ASTNode EM():
{ Token op;
  ASTNode t1, t2; }
{
  t1 = EOR() ( ( op=< SEQ >) t2=EM()
  				{ t1 = new ASTSeq(t1,t2); }
			)*
	{ return t1; }
}

ASTNode EOR():
{ ASTNode t1, t2; }
{
  t1 = EAND() ( <OR> t2 = EOR()
  				{ t1 = new ASTOr(t1,t2); } )*
  	{ return t1; }
}

ASTNode EAND():
{ ASTNode t1, t2; }
{
  t1 = E() ( <AND> t2 = EAND()
  				{ t1 = new ASTAnd(t1,t2); } )*
  	{ return t1; }
}


ASTNode E():
{ ASTNode t1, t2; }
{
  	t1 = EINEQ() ( < ISEQ > t2=E()
  				{ t1 = new ASTEquals(t1,t2); }
  			  )*
    { return t1; }
}

ASTNode EINEQ():
{ Token op;
  ASTNode t1, t2; }
{
  t1 = EA() ( ( op=<LT> | op=<LE> | op=<GE> | op=<GT> ) t2 = EINEQ()
  				{ if (op.kind == LT)
  					t1 = new ASTLower(t1,t2);
  				  else if (op.kind == LE)
  				  	t1 = new ASTLowerEqual(t1,t2);
  				  else if (op.kind == GE)
  				  	t1 = new ASTGreaterEqual(t1,t2);
  				  else if (op.kind == GT)
  				  	t1 = new ASTGreater(t1,t2); } )*
  	{  return t1; }
}
    
  

ASTNode EA() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=T() ( <PLUS> t2=EA()
                 { t1 = new ASTPlus(t1,t2); }
               | < MINUS > t2=F()
           		 { t1 = new ASTSub(t1,t2); } 
                  ) *
     { return t1; } 
}

ASTNode T() :
{ Token op;
  ASTNode f1, f2;
  List<ASTNode> al;}
{
     f1=F() ( ( < LPAR > al=AL() < RPAR >
				{ f1 = new ASTApply(f1, al); }
     			)+
       			| < ASSIGN > f2=E() { f1 = new ASTAssign(f1,f2); }
				| < DOT > op=< Id >
					{ f1 = new ASTField(f1,op.image); }
     	        | ( ( op=<TIMES> | op=<DIV> ) f2=T()
			     { if (op.kind == TIMES)
			     		f1 = new ASTMul(f1,f2);
			     	else if (op.kind == DIV)
			     		f1 = new ASTDiv(f1,f2);
			   	 }
			       )*
			   )
	{ return f1; }
}

List<ASTNode> AL():
{ ASTNode n;
  List<ASTNode> args = new LinkedList(); }
{
  ( n=EM()
  	{ args.add(n); }
  	( < COMMA > n = EM()
  		{ args.add(n); }
 	)*
  )?
 { return args; }
}


void PL(List<String> ids, List<ASTType> types):
{ Token id;
  ASTType type; }
{
  (id=<Id><COLON > type=getType()
  		{ ids.add( id.image ); types.add( type ); }
   	 (< COMMA > id=< Id ><COLON > type=getType()
  		{ ids.add( id.image ); types.add( type ); }
  	 )*
  )?
}

ASTNode F() :
{ Token n, id; 
  ASTNode t, init1, init2, body;
  ASTType type;
  List<ASTNode> inits = new LinkedList();
  List<String> ids = new LinkedList();
  List<ASTType> types = new LinkedList();
  Map<String,ASTNode> sNodes = new HashMap();
  Map<String,ASTType> sTypes = new HashMap();}
{
    (  n=< Num >   {  t = new ASTNum(Integer.parseInt(n.image)); }
   | < QUOTE > n=< Id > < QUOTE > 	{ t = new ASTString(n.image); }  
   | <LPAR> t=EM() <RPAR>
   | < MINUS > t=F() { t = new ASTMul(new ASTNum(-1), t); }
   | < PLUS > t=F()
   | n =< BOOL > { t = new ASTBool( n.image ); }
   | < NEW > t=F() { t = new ASTNewRef( t ); }
   | < DESREF > t=F() { t = new ASTDeref( t ); }
   | < IF > t=EM() < THEN > init1=EM() < ELSE > init2=EM() < END >
   			{ t = new ASTIf( t, init1, init2 ); }
   | < WHILE > t=EM() < DO > body=EM() < END >
   			{ t = new ASTWhile(t,body); }
   | < NOT > t=F()
   			{  t = new ASTNeg(t); }
   | < LET > id = < Id > <COLON> type=getType() <EQ > init1=EM()
   			{	ids.add(id.image); types.add(type); inits.add(init1); }
   		( < COMMA > id = < Id > <COLON> type=getType()  <EQ > init2=EM()
   			{ ids.add(id.image); types.add(type); inits.add(init2); }
   		)*
   		< IN > body=EM() < END >
   		
   		{ t = new ASTLet(ids, types, inits, body); }
    | <FUN> PL(ids, types) <IS> body=EM() <END>
		{ t = new ASTFun(ids, types, body); }
	| <PRINTLN> t = E()
		{ t = new ASTPrint(t); }
	| <LCB> id=< Id > <COLON> type=getType() < EQ > t=E()
			{ sNodes.put(id.image, t); sTypes.put(id.image, type); }
		( < SEQ > id=< Id > <COLON> type=getType() < EQ > t=E()
			{ sNodes.put(id.image, t); sTypes.put(id.image, type); }
		)* <RCB>
		{ t = new ASTStruct(sNodes, sTypes); }
   	| id=< Id > { t = new ASTId( id.image ); }
   )

   { return t; }
}


ASTType getType() :
{ ASTType t, type;
  List<ASTType> param = new LinkedList<ASTType>(); }
{
  (
    < LPAR > t=getType()
    		{ param.add(t); }
    		
    	( < COMMA > t=getType()
			{ param.add(t); }
			
    	 )*
    	 < RPAR > t=getType()
    	 	{ type = ASTFunType.getInstance( param, t ); }
    |
    < LCB > t=getType()
    		{ param.add(t); }
    	( < SEQ > t=getType()
    		{ param.add(t); }
   		)*
   		< RCB >
   			{ type = ASTStructType.getInstance( param ); }
    |
    < REF_T > t=getType()
    	{ type = ASTRefType.getInstance( t ); }
    |
    < INT_T >
    	{ type = ASTIntType.getInstance(); }
    |
    < BOOL_T >
    	{ type = ASTBoolType.getInstance(); }
    |
    < STR_T >
    	{ type = ASTStringType.getInstance(); } 
  )
  { return type; }
}




















